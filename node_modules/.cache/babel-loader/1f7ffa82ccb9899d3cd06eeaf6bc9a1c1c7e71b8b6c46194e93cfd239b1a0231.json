{"ast":null,"code":"import React,{useContext}from'react';import Mine from'../../images/mine.svg';import Flag from'../../images/flag.svg';import{gameSettingsContext}from'../../contexts/Context';import{jsx as _jsx}from\"react/jsx-runtime\";const GameButton=props=>{const gameContext=useContext(gameSettingsContext);const gameSettings=gameContext.gameSettings;const square=props.square;const squares=props.squares;const squareClick=()=>{if(square.isMined){gameContext.setGameSettings({...gameSettings,winner:false});}if(!square.isMined){props.setNotMinedBlock(prevNumber=>prevNumber-1);}const{row,col}=square;const neighbors=[{row:row-1,col:col-1},{row:row-1,col:col},{row:row-1,col:col+1},{row:row,col:col-1},{row:row,col:col+1},{row:row+1,col:col-1},{row:row+1,col:col},{row:row+1,col:col+1}];let minesCount=0;neighbors.forEach(neighbor=>{const{row,col}=neighbor;const neighborSquare=squares.find(el=>el.row===row&&el.col===col);if(neighborSquare===undefined){return;}if(neighborSquare.isMined){minesCount++;}});let updatedSquares=squares.map(s=>{if(s.id===square.id){return{...s,isRevealed:true,value:minesCount};}return s;});props.setSquares(updatedSquares);const updatedNeighbors=neighbors.filter(neighbor=>{const neighborSquare=squares.find(el=>el.row===neighbor.row&&el.col===neighbor.col);if(neighborSquare===undefined){return false;}if(neighborSquare.isMined){return false;}if(!neighborSquare.isMined&&!neighborSquare.isRevealed){props.setNotMinedBlock(prevNumber=>prevNumber-1);}return true;});updatedNeighbors.forEach(neighbor=>{const neighborSquare=squares.find(el=>el.row===neighbor.row&&el.col===neighbor.col);if(neighborSquare.isRevealed){return;}neighborSquare.isRevealed=true;props.setSquares(updatedSquares);// Дополнительная логика для подсчета количества мин вокруг соседних клеток\nlet minesCount=0;const neighborNeighbors=[{row:neighbor.row-1,col:neighbor.col-1},{row:neighbor.row-1,col:neighbor.col},{row:neighbor.row-1,col:neighbor.col+1},{row:neighbor.row,col:neighbor.col-1},{row:neighbor.row,col:neighbor.col+1},{row:neighbor.row+1,col:neighbor.col-1},{row:neighbor.row+1,col:neighbor.col},{row:neighbor.row+1,col:neighbor.col+1}];neighborNeighbors.forEach(neighborNeighbor=>{const{row,col}=neighborNeighbor;const neighborNeighborSquare=squares.find(el=>el.row===row&&el.col===col);if(neighborNeighborSquare===undefined){return;}if(neighborNeighborSquare.isMined){minesCount++;}});neighborSquare.value=minesCount;});};const firstSquareClick=()=>{let totalMines=0;let minedSquares=squares;minedSquares[square.id-1].isRevealed=true;while(totalMines<gameSettings.mines){let randomSquareId=Math.floor(Math.random()*(minedSquares.length-1)+1);if(minedSquares[randomSquareId].isMined===true){}else if(minedSquares[randomSquareId].isMined===false&&minedSquares[randomSquareId].isRevealed===false){minedSquares[randomSquareId].isMined=true;totalMines++;}}props.setSquares(minedSquares);props.setFirstClick(false);for(let i=0;i<squares.length;i++){if(!squares[i].isMined){props.setNotMinedBlock(prevNumber=>prevNumber+1);}}squareClick();};const contextMenuOff=e=>{e.preventDefault();e.stopPropagation();};const flagClick=()=>{let updatedSquares=squares.map(s=>{if(s.id===square.id&&!square.isFlagged&&!gameSettings.winner){if(props.flags>0){props.setFlags(prevFlags=>prevFlags-1);if(square.isMined){props.setMines(prevMines=>prevMines-1);gameContext.setGameSettings(prevSettings=>({...prevSettings,mines:prevSettings.mines-1}));}gameContext.setGameSettings(prevSettings=>({...prevSettings,flags:prevSettings.flags-1}));return{...s,isRevealed:true,isFlagged:true};}}else if(s.id===square.id&&square.isFlagged&&!gameSettings.winner){props.setFlags(prevFlags=>prevFlags+1);if(square.isMined){props.setMines(prevMines=>prevMines+1);gameContext.setGameSettings(prevSettings=>({...prevSettings,mines:prevSettings.mines+1}));}gameContext.setGameSettings(prevSettings=>({...prevSettings,flags:prevSettings.flags+1}));return{...s,isRevealed:false,isFlagged:false};}return s;});props.setSquares(updatedSquares);};return/*#__PURE__*/_jsx(\"button\",{onContextMenu:contextMenuOff,onAuxClick:flagClick,className:square.isFlagged&&square.isMined&&square.isRevealed?'game-button__revelead':square.isMined&&square.isRevealed?'game-button__mine-revelead':square.isRevealed?'game-button__revelead':'game-button',disabled:square.isRevealed||gameContext.gameSettings.winner===false||square.isFlagged||gameContext.gameSettings.winner===true,onClick:props.firstClick?firstSquareClick:squareClick,children:square.isFlagged?/*#__PURE__*/_jsx(\"img\",{className:square.isRevealed?'game-board__mine':'game-board__mine-hidden',src:Flag,alt:\"flag\"}):square.isMined?/*#__PURE__*/_jsx(\"img\",{className:square.isRevealed?'game-board__mine':'game-board__mine-hidden',src:Mine,alt:\"mine\"}):square.value===0?'':/*#__PURE__*/_jsx(\"p\",{className:square.value===1?'value value-1':square.value===2?'value value-2':square.value===3?'value value-3':square.value===4?'value value-4':square.value===5?'value value-5':square.value===6?'value value-6':square.value===7?'value value-7':square.value===8?'value value-8':'',children:square.value})});};export default GameButton;","map":{"version":3,"names":["React","useContext","Mine","Flag","gameSettingsContext","jsx","_jsx","GameButton","props","gameContext","gameSettings","square","squares","squareClick","isMined","setGameSettings","winner","setNotMinedBlock","prevNumber","row","col","neighbors","minesCount","forEach","neighbor","neighborSquare","find","el","undefined","updatedSquares","map","s","id","isRevealed","value","setSquares","updatedNeighbors","filter","neighborNeighbors","neighborNeighbor","neighborNeighborSquare","firstSquareClick","totalMines","minedSquares","mines","randomSquareId","Math","floor","random","length","setFirstClick","i","contextMenuOff","e","preventDefault","stopPropagation","flagClick","isFlagged","flags","setFlags","prevFlags","setMines","prevMines","prevSettings","onContextMenu","onAuxClick","className","disabled","onClick","firstClick","children","src","alt"],"sources":["C:/Users/bibat/OneDrive/Рабочий стол/Работа/поверстать/saper/src/components/Helpers/GameButton.jsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport Mine from '../../images/mine.svg'\r\nimport Flag from '../../images/flag.svg'\r\nimport { gameSettingsContext } from '../../contexts/Context';\r\n\r\nconst GameButton = (props) => {\r\n    const gameContext = useContext(gameSettingsContext)\r\n    const gameSettings = gameContext.gameSettings\r\n    const square = props.square\r\n    const squares = props.squares\r\n\r\n    const squareClick = () => {\r\n        if (square.isMined) {\r\n            gameContext.setGameSettings({\r\n                ...gameSettings, winner: false\r\n            })\r\n        }\r\n        if (!square.isMined) {\r\n            props.setNotMinedBlock((prevNumber) => prevNumber - 1)\r\n        }\r\n        const { row, col } = square;\r\n        const neighbors = [\r\n            { row: row - 1, col: col - 1 },\r\n            { row: row - 1, col: col },\r\n            { row: row - 1, col: col + 1 },\r\n            { row: row, col: col - 1 },\r\n            { row: row, col: col + 1 },\r\n            { row: row + 1, col: col - 1 },\r\n            { row: row + 1, col: col },\r\n            { row: row + 1, col: col + 1 },\r\n        ];\r\n        let minesCount = 0;\r\n        neighbors.forEach(neighbor => {\r\n            const {row , col } = neighbor\r\n                const neighborSquare = squares.find(el => el.row === row && el.col === col);\r\n                if (neighborSquare === undefined) {\r\n                    return\r\n                }\r\n                if (neighborSquare.isMined) {\r\n                    minesCount++;\r\n                }\r\n        })\r\n        let updatedSquares = squares.map(s => {\r\n            if (s.id === square.id) {\r\n                return { ...s, isRevealed: true, value: minesCount };\r\n            }\r\n            return s;\r\n        });\r\n        props.setSquares(updatedSquares);\r\n    \r\nconst updatedNeighbors = neighbors.filter(neighbor => {\r\n    const neighborSquare = squares.find(el => el.row === neighbor.row && el.col === neighbor.col);\r\n    if (neighborSquare === undefined) {\r\n        return false;\r\n    }\r\n    if (neighborSquare.isMined) {\r\n        return false;\r\n    }\r\n    if (!neighborSquare.isMined && !neighborSquare.isRevealed) {\r\n        props.setNotMinedBlock((prevNumber) => prevNumber - 1)\r\n    }\r\n    return true;\r\n});\r\n\r\nupdatedNeighbors.forEach(neighbor => {\r\n    const neighborSquare = squares.find(el => el.row === neighbor.row && el.col === neighbor.col);\r\n    if (neighborSquare.isRevealed) {\r\n        return;\r\n    }\r\n    neighborSquare.isRevealed = true;\r\n    props.setSquares(updatedSquares)\r\n\r\n    // Дополнительная логика для подсчета количества мин вокруг соседних клеток\r\n    let minesCount = 0;\r\n    const neighborNeighbors = [\r\n        { row: neighbor.row - 1, col: neighbor.col - 1 },\r\n        { row: neighbor.row - 1, col: neighbor.col },\r\n        { row: neighbor.row - 1, col: neighbor.col + 1 },\r\n        { row: neighbor.row, col: neighbor.col - 1 },\r\n        { row: neighbor.row, col: neighbor.col + 1 },\r\n        { row: neighbor.row + 1, col: neighbor.col - 1 },\r\n        { row: neighbor.row + 1, col: neighbor.col },\r\n        { row: neighbor.row + 1, col: neighbor.col + 1 },\r\n    ];\r\n    neighborNeighbors.forEach(neighborNeighbor => {\r\n        const {row , col } = neighborNeighbor\r\n            const neighborNeighborSquare = squares.find(el => el.row === row && el.col === col);\r\n            if (neighborNeighborSquare === undefined) {\r\n                return\r\n            }\r\n            if (neighborNeighborSquare.isMined) {\r\n                minesCount++;\r\n            }\r\n    });\r\n    neighborSquare.value = minesCount;\r\n    });\r\n};\r\n\r\n    const firstSquareClick = () => {\r\n        let totalMines = 0;\r\n        let minedSquares = squares;\r\n\r\n        minedSquares[square.id - 1].isRevealed = true\r\n\r\n        while (totalMines < gameSettings.mines) {\r\n            let randomSquareId = Math.floor(Math.random() * (minedSquares.length - 1) + 1);\r\n\r\n            if (minedSquares[randomSquareId].isMined === true) {\r\n            } else if (minedSquares[randomSquareId].isMined === false && minedSquares[randomSquareId].isRevealed === false) {\r\n                minedSquares[randomSquareId].isMined = true;\r\n                totalMines++;\r\n            }\r\n        }\r\n        props.setSquares(minedSquares);\r\n        props.setFirstClick(false);\r\n        for (let i = 0; i < squares.length; i++) {\r\n            if (!squares[i].isMined) {\r\n                props.setNotMinedBlock((prevNumber) => prevNumber + 1)\r\n            }\r\n        }\r\n        squareClick()\r\n};\r\n    const contextMenuOff = (e) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n    }\r\n        const flagClick = () => {\r\n                let updatedSquares = squares.map((s) => {\r\n                    if (s.id === square.id && !square.isFlagged && !gameSettings.winner) {\r\n                        if (props.flags > 0) {\r\n                            props.setFlags((prevFlags) => prevFlags - 1);\r\n                            if (square.isMined) {\r\n                            props.setMines((prevMines) => prevMines - 1);\r\n                            gameContext.setGameSettings((prevSettings) => ({\r\n                                ...prevSettings,\r\n                                mines: prevSettings.mines - 1,\r\n                            }));\r\n                            }\r\n                            gameContext.setGameSettings((prevSettings) => ({\r\n                            ...prevSettings,\r\n                            flags: prevSettings.flags - 1,\r\n                            }));\r\n                            return { ...s, isRevealed: true, isFlagged: true };\r\n                        }\r\n                    } else if (s.id === square.id && square.isFlagged && !gameSettings.winner) {\r\n                        props.setFlags((prevFlags) => prevFlags + 1);\r\n                        if (square.isMined) {\r\n                        props.setMines((prevMines) => prevMines + 1);\r\n                        gameContext.setGameSettings((prevSettings) => ({\r\n                            ...prevSettings,\r\n                            mines: prevSettings.mines + 1,\r\n                        }));\r\n                        }\r\n                        gameContext.setGameSettings((prevSettings) => ({\r\n                        ...prevSettings,\r\n                        flags: prevSettings.flags + 1,\r\n                        }));\r\n                        return { ...s, isRevealed: false, isFlagged: false };\r\n                    }\r\n                    return s;\r\n                    });\r\n                    props.setSquares(updatedSquares);\r\n        };\r\n        \r\n    \r\n    return (\r\n        <button \r\n            onContextMenu={contextMenuOff} \r\n            onAuxClick={flagClick} \r\n            className={square.isFlagged && square.isMined && square.isRevealed ? 'game-button__revelead' : square.isMined && square.isRevealed ? 'game-button__mine-revelead' : square.isRevealed ? 'game-button__revelead': 'game-button'} \r\n            disabled={square.isRevealed || gameContext.gameSettings.winner === false || square.isFlagged || gameContext.gameSettings.winner === true} \r\n            onClick={props.firstClick ? firstSquareClick : squareClick}\r\n        >    \r\n            {   \r\n                square.isFlagged ?\r\n                <img className={square.isRevealed ? 'game-board__mine' : 'game-board__mine-hidden'} \r\n                src={Flag} alt='flag'/> :\r\n                square.isMined ?\r\n                <img className={square.isRevealed ? 'game-board__mine' : 'game-board__mine-hidden'} \r\n                src={Mine} alt='mine'/> : \r\n                square.value === 0 ? '' :\r\n                <p className={\r\n                    square.value === 1 ? 'value value-1' :\r\n                    square.value === 2 ? 'value value-2' :\r\n                    square.value === 3 ? 'value value-3' :\r\n                    square.value === 4 ? 'value value-4' :\r\n                    square.value === 5 ? 'value value-5' :\r\n                    square.value === 6 ? 'value value-6' :\r\n                    square.value === 7 ? 'value value-7' :\r\n                    square.value === 8 ? 'value value-8' :\r\n                    ''\r\n                }>{square.value}</p> \r\n                }\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default GameButton;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}